generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid()) @db.Uuid
  email                  String                  @unique @db.VarChar(255)
  isEmailConfirmed       Boolean                 @default(false)
  passwordHash           String?                 @db.VarChar(255)
  firstName              String?                 @db.VarChar(255)
  lastName               String?                 @db.VarChar(255)
  lastLoginAt            DateTime?               @db.Timestamp(6)
  lastLoginIP            String?                 @db.Inet
  createdIP              String                  @db.Inet
  createdAt              DateTime                @default(now()) @db.Timestamp(6)
  updatedAt              DateTime?               @updatedAt
  tokenVersion           Int                     @default(0)
  oauthGoogleIdentifier  String?                 @unique @db.VarChar(255)
  oauthGithubIdentifier  String?                 @unique @db.VarChar(255)
  emailConfirmationToken EmailConfirmationToken?
  forgotPasswordToken    ForgotPasswordToken?
  permissions            UserPermission[]
  roles                  UserRole[]

  OAuthAuthCodes OAuthAuthCode[]
  OAuthTokens    OAuthToken[]

  @@index([email], name: "idx_user_email")
}

model EmailConfirmationToken {
  id        String   @id @db.Uuid
  expiresAt DateTime @db.Timestamp(6)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "idx_emailconfirmationtoken_userid")
}

model ForgotPasswordToken {
  id        String   @id @db.Uuid
  expiresAt DateTime @db.Timestamp(6)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], name: "idx_forgotpasswordtoken_userid")
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
  userRole        UserRole[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
}

model RolePermission {
  permissionId Int
  roleId       Int
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

model UserPermission {
  permissionId Int
  userId       String     @db.Uuid
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  roleId       Int?
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role?      @relation(fields: [roleId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, permissionId])
}

model UserRole {
  roleId    Int
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

//model User {
//  id             String          @id @db.Uuid
//  email          String          @unique
//  passwordHash   String          @db.VarChar(255)
//  OAuthAuthCodes OAuthAuthCode[]
//  OAuthTokens    OAuthToken[]
//
//  @@index([email], name: "idx_user_email")
//}

enum GrantTypes {
  client_credentials
  authorization_code
  refresh_token
  implicit
  password
}

model OAuthClient {
  id               String             @id @default(uuid()) @db.Uuid
  name             String             @db.VarChar(255)
  secret           String?            @db.VarChar(255)
  redirectUris     String[]
  allowedGrants    GrantTypes[]
  scopes           OAuthScope[]
  authCodes        OAuthAuthCode[]
  tokens           OAuthToken[]
  OAuthClientScope OAuthClientScope[]
}

model OAuthClientScope {
  clientId String      @db.Uuid
  client   OAuthClient @relation(fields: [clientId], references: [id])
  scopeId  String      @db.Uuid
  scope    OAuthScope  @relation(fields: [scopeId], references: [id])

  @@id([clientId, scopeId])
  @@index([clientId], name: "idx_oauthclient_oauthscope_clientid")
  @@index([scopeId], name: "idx_oauthclient_oauthscope_scopeid")
  @@map("oauthClient_oauthScope")
}

enum CodeChallengeMethod {
  s256
  plain
}

model OAuthAuthCode {
  code                String              @id
  redirectUri         String?
  codeChallenge       String?
  codeChallengeMethod CodeChallengeMethod @default(plain)
  expiresAt           DateTime
  user                User?               @relation(fields: [userId], references: [id])
  userId              String?             @db.Uuid
  client              OAuthClient         @relation(fields: [clientId], references: [id])
  clientId            String              @db.Uuid
  scopes              OAuthScope[]
}

model OAuthToken {
  accessToken           String       @id
  accessTokenExpiresAt  DateTime
  refreshToken          String?      @unique
  refreshTokenExpiresAt DateTime?
  client                OAuthClient  @relation(fields: [clientId], references: [id])
  clientId              String       @db.Uuid
  user                  User?        @relation(fields: [userId], references: [id])
  userId                String?      @db.Uuid
  scopes                OAuthScope[]

  @@index([accessToken], name: "idx_oauthtoken_accesstoken")
  @@index([refreshToken], name: "idx_oauthtoken_refreshtoken")
}

model OAuthScope {
  id            String          @id @db.Uuid
  name          String
  OAuthClients  OAuthClient[]
  OAuthAuthCode OAuthAuthCode[]
  OAuthToken    OAuthToken[]


  OAuthClientScope OAuthClientScope[]
  @@index([name], name: "idx_oauthscope_name")
}
